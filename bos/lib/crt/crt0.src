	assume	adl=1

mpTmr1Counter := 0F20000h
mpTmrCtrl := 0F20030h

bTmr1Enable := 0
bTmr1Crystal := 1
bTmr1Overflow := 2
bTmr1CountUp := 9

	public	_errno
_errno := $D008DC

	section	.text
	public	_atexit
_atexit:
	public	_on_exit
_on_exit:
	ld	hl,3*long
	push	hl
	call	_malloc
	pop	bc
	ex	de,hl
	scf
	sbc	hl,hl
	add	hl,de
	ret	nc
	ld	hl,(exit_functions)
	ex	de,hl
	ld	(exit_functions),hl
	ld	(hl),de
	pop	de
repeat 2
 repeat long
	inc	hl
 end repeat
	pop	bc
	ld	(hl),bc
end repeat
	push	bc,bc
	ex	de,hl
	jp	(hl)

	section	.rodata
	private	exit_functions
exit_functions rl 1

	section	.rodata
	private	init_functions
init_functions:
load functions: ___init_array_count * long from init_array: 0
	dl	functions
load functions: ___ctors_count * long from ctors: 0
	dl	functions

	section	.rodata
	private	fini_functions
load functions: ___dtors_count * long from dtors: 0
	dl	functions
load functions: ___fini_array_count * long from fini_array: 0
	dl	functions
fini_functions:

	section	.header
if defined BOS_APP
include "../bos_macros.inc"
	flash_executable ; BOS Flash Executable header (the macro also handles relocation)
else
;extern ram_executable
;	ram_executable
	db $18,$03,"REX" ; BOS Ram Executable header
end if
	db 0 ; C program identifier byte (nop)
if defined BOS_APP
	if HAS_ICON
		; If there's an icon/description, it will begin with a jp instruction.
		; We need to make sure we don't execute it because it doesn't account for long offset instruction notation
		if launcher - $ < $80
			jr launcher
		else
			jp launcher
		end if
	end if
end if

	section	.init.libs
private launcher
launcher:
	ld	hl,.libloadname
	push	hl
extern	_sys_OpenFileInLib
	call	_sys_OpenFileInLib
	pop	bc
	jr	c,.notfound
	push hl
if defined BOS_APP
flash_executable_disable_relocations
	ld	de,$D1A881
	ld	hl,___libs_length + ___data_length + 5
	ld	($D0118C),hl ; asm_prgm_size
	push	de
	call	$020514 ; _InsertMem
	pop	de
	rst $28 ; manually relocate this lol
	ld	hl,___libs - ._1
._1:
	ld	bc,___libs_length
	ldir
	ex	hl,de
	ld	(hl),0
	inc	hl
	ld	(hl),$C3
	inc	hl
	rst	$28
	ld	de,__start - ._3
._3:
	ld	(hl),de
	inc	hl
	inc	hl
	inc	hl
	ex	hl,de
	rst $28
	ld	hl,___data - ._2
._2:
	ld	bc,___data_length
	ldir
flash_executable_enable_relocations
end if

extern _fs_GetFDPtr
	call	_fs_GetFDPtr
	pop bc
	jr c,.notfound
	ld	de,___libs	; start of relocation data
	jp	(hl)		; jump to the loader -- it should take care of everything else
.notfound:
	ld	hl,.missingappvar
extern	_asm_gui_PrintLine
	call	_asm_gui_PrintLine
	ld	hl,.webaddress
	call	_asm_gui_PrintLine
extern	_sys_WaitKeyCycle
	jq	_sys_WaitKeyCycle		; _getkey


	section	.rodata
	private	.missingappvar
.missingappvar:
	db	"Missing "
	private	.libloadname
.libloadname:
	db	"LibLoad.dll"
	private	.libloadnamelen
.libloadnamelen := $-.libloadname
	db	0
	private	.webaddress
.webaddress:
	db	"bos.abeck.pw",0

	section .start

	section	.init.clock
	public	___init_clock
___init_clock:
; Disable timer 1 and configure it to use the 32768Hz crystal timer, not
; generate an interurrupt on overflow, and count up.
assert bTmr1CountUp / 8 = 1
	ld	hl, mpTmrCtrl + 1
	set	bTmr1CountUp - 8, (hl)
	dec	hl
assert bTmr1Enable / 8 = 0
	res	bTmr1Enable, (hl)
assert bTmr1Crystal / 8 = 0
	set	bTmr1Crystal, (hl)
assert bTmr1Overflow / 8 = 0
	res	bTmr1Overflow, (hl)
; Set the counter to zero.
assert mpTmrCtrl shr 8 = (mpTmr1Counter + 1) shr 8
	ld	l, (mpTmr1Counter + 1) and $FF
	ld	de, 0
	ld	(hl), de
	dec	hl
	ld	(hl), e
; Enable the timer.
assert bTmr1Enable / 8 = 0
assert mpTmr1Counter shr 8 = mpTmrCtrl shr 8
	ld	l, mpTmrCtrl and $FF
	set	bTmr1Enable, (hl)
	section	.text
	private	___rerun_handler
	private	___rerun_handler.callback
	private	___rerun_handler.data
	private	___rerun_handler.retval
	private	___rerun_handler.data_size
___rerun_handler:
	ld	hl,(_exit.sp)
if defined BOS_APP
	ld	de,(.data_size)
else
	ld	de,0
.data_size := $ - 3
end if
	add	hl,de
	ld	(_exit.sp),hl		; move exit.sp to real ret
if defined BOS_APP
	ld	hl,(.retval)
else
	ld	hl,0
.retval := $ - 3
end if
	ex	(sp),hl
if defined BOS_APP
	ld	de,(BOS_APP)
else
	ld	de,0
.data := $ - 3
end if
	push	de,hl
if defined BOS_APP
	ld	hl,(.callback)
	jp	(hl)
else
	jp	0
.callback := $ - 3
end if

	section	.init.reruncheck
	public	___prgm_run_check
___prgm_run_check:
	ld	de,___prgm_caller
	call	002032Ch		; ti.MovFROP1
	pop	hl
	ld	de,1
	add	hl,de
	dec	hl
	jq	nc,.no_rerun
	ld	hl,___rerun_handler
	ld	(__start._main),hl
	pop	hl
	ld	(___rerun_handler.retval),hl
	pop	hl
	ld	(___rerun_handler.callback),hl
	pop	hl
	ld	(___rerun_handler.data_size),hl
	ex	de,hl
	add	hl,sp			; user callback data
	dec	hl
	ld	(___rerun_handler.data),hl
virtual
	ld	a,0
 load .ld_a: byte from $$
end virtual
	db	.ld_a
.no_rerun:
	push	hl

	section	.init
	weak	__start
__start:
	call	0020848h	; _RunInicOff, assumes iy = flags
	call	00004F4h	; _usb_DisableTimer
	di			; disable interrupts
if defined ___main_argc_argv
	pop	hl,bc,de	; de <- argv, bc <- argc
	push	de,bc,hl
end if
	ld	hl,0E00305h
	ld	a,(hl)
	ld	(_exit.flash_wait_states),a
	ld	(hl),h		; set flash wait states to 3; 1 was definitely
				; too low, 2 is untested
	ld	(_exit.sp),sp	; save sp for exiting
if defined ___main_argc_argv
	push de,bc
end if


if ___len_bss > 0
if ___len_bss = 1
	xor	a,a
	ld	(___low_bss),a
else if ___len_bss = 2
	ld	hl,___low_bss
	xor	a,a
	ld	(hl),a
	inc	hl
	ld	(hl),a
else if ___len_bss = 3
	or	a,a
	sbc	hl,hl
	ld	(___low_bss),hl
else
	ld	hl,___low_bss
if ___len_bss = 8
	call	0020368h	; _Zero16D
else if ___len_bss = 11
	call	0020390h	; _ZeroOP
else if ___len_bss < 256
	ld	b,___len_bss
	call	0020394h	; _ClrLp
else if ___len_bss = 256 | ___len_bss = 257
	xor	a,a
	ld	b,a
.clearbssloop:
	ld	(hl),a
	inc	hl
	djnz	.clearbssloop
if ___len_bss = 257
	ld	(hl),a
end if
else
	ld	bc,___len_bss
	call	00210DCh	; _MemClear
end if
end if
end if

.init_count := ___init_array_count + ___ctors_count
if .init_count <= 21
 repeat ___init_array_count
  load function: long from init_array: (%-1) * long
	call	function
 end repeat
 repeat ___ctors_count
  load function: long from ctors: (%-1) * long
	call	function
 end repeat
else
	ld	ix,init_functions
	ld	b,((.init_count-1) shr  0 and $FF)+1
 if .init_count > $100
	ld	c,((.init_count-1) shr  8 and $FF)+1
  if .init_count > $10000
	ld	a,((.init_count-1) shr 16 and $FF)+1
  end if
 end if
.init_loop:
	push	bc
 if .init_count > $10000
	push	af
 end if
	ld	hl,(ix)
	lea	ix,ix+long
	call	__indcallhl
 if .init_count > $10000
	pop	af
 end if
	pop	bc
	djnz	.init_loop
 if .init_count > $100
	dec	c
	jq	nz,.init_loop
  if .init_count > $10000
	dec	a
	jq	nz,.init_loop
  end if
 end if
end if


ifextern ___main_argc_argv
	call	___main_argc_argv
else
if defined BOS_APP
	ld	hl,_main
	ld	(_jp_main+1),hl
	call _jp_main
else
	call	_main
	public	__start._main
__start._main := $ - 3
end if
end if
	require	___exithl

if defined BOS_APP
	section .data
___rerun_handler.retval := $ + $D1A881 + 5 + ___libs_length - ___data
	dl 0
___rerun_handler.callback := $ + $D1A881 + 5 + ___libs_length - ___data
	dl 0
___rerun_handler.data_size := $ + $D1A881 + 5 + ___libs_length - ___data
	dl 0
___rerun_handler.data := $ + $D1A881 + 5 + ___libs_length - ___data
	dl 0

private _jp_main
_jp_main := $ + $D1A881 + 5 + ___libs_length - ___data
	db $C3,0,0,0 ; jp 0 (will be SMC'd once in RAM)
	; public	__start._main
__start._main := $ + $D1A881 + 5 + ___libs_length - ___data + 3
end if

	section	.fini
	public	___exithl
___exithl:
if push_exit_code <> pop_exit_code
	push	hl
end if
push_exit_code:
	require	skip._exit

	section	.fini
virtual
	ld	a,0
 load .ld_a: byte from $$
end virtual
	db	.ld_a

	public	_exit
_exit:
	pop	hl

	section	.fini
	private	skip._exit
skip._exit:
if defined exit_functions
	jq	.function_enter
.function_loop:
	ld	hl,(ix+1+0*long)
	ld	(exit_functions),hl
	pop	hl
	ld	de,(ix+1+2*long)
	push	hl,de,hl
	ld	hl,(ix+1+1*long)
	push	hl,ix+1
	call	_free
	pop	bc,hl
	call	__indcallhl
	pop	bc,bc
.function_enter:
	ld	ix,(exit_functions)
	ld	bc,-1
	add	ix,bc
	jq	c,.function_loop
end if

.fini_count := ___dtors_count + ___fini_array_count
if .fini_count <= 21
 repeat ___fini_array_count
  load function: long from fini_array: (%%-%) * long
	call	function
 end repeat
 repeat ___dtors_count
  load function: long from dtors: (%%-%) * long
	call	function
 end repeat
else
	ld	ix,fini_functions
	ld	b,((.fini_count-1) shr  0 and $FF)+1
 if .fini_count > $100
	ld	c,((.fini_count-1) shr  8 and $FF)+1
  if .fini_count > $10000
	ld	a,((.fini_count-1) shr 16 and $FF)+1
  end if
 end if
.fini_loop:
	push	bc
 if .fini_count > $10000
	push	af
 end if
	lea	ix,ix-long
	ld	hl,(ix)
	call	__indcallhl
 if .fini_count > $10000
	pop	af
 end if
	pop	bc
	djnz	.fini_loop
 if .fini_count > $100
	dec	c
	jq	nz,.fini_loop
  if .fini_count > $10000
	dec	a
	jq	nz,.fini_loop
  end if
 end if
end if
	require	skip.__Exit

	section	.fini
virtual
	ld	a,0
 load .ld_a: byte from $$
end virtual
	db	.ld_a

	public	__Exit
__Exit:
	pop	hl

	section	.fini
	private	skip.__Exit
skip.__Exit:
pop_exit_code:
if push_exit_code <> pop_exit_code
	pop	hl
end if
	require	skip._abort

	section	.fini
virtual
	ld	iy,0
 load _abort.iy_pre: byte from $$
end virtual
	db	_abort.iy_pre

	public	_abort
_abort:
	ld	hl,1 shl 23+6	; SIGABRT

	section	.fini
	private	skip._abort
skip._abort:

if defined BOS_APP
	ld	sp,(_exit.sp)
else
	ld	sp,0
	public	_exit.sp
_exit.sp := $-3
end if
	push	hl
	ld	iy,0D00080h
if defined BOS_APP
	ld	a,(_exit.flash_wait_states)
else
	ld	a,0
	private	_exit.flash_wait_states
_exit.flash_wait_states := $-1
end if
	ld	(0E00305h),a
	call	00004F0h	; _usb_ResetTimer
	call	_os_EnableHomeTextBuffer
	ld	a,1
	ld	(0F00008h),a	; clear on interrupt
	res	4,(iy+9)	; onInterrupt,(iy+onFlags)
	set	0,(iy+3)	; graphDraw,(iy+graphFlags)
	call	020808h		; _ClrLCDFull
	call	020828h		; _HomeUp
	call	021A3Ch		; _DrawStatusBar

if defined BOS_APP
	ld	hl,$D1A881
	ld	de,___libs_length + ___data_length + 5
	call	$020590 ; _DelMem
end if

	pop	hl		; hl = exit code
	ret

	section .data
if defined BOS_APP
_exit.sp := $ + $D1A881 + 5 + ___libs_length - ___data
	dl 0
	private _exit.flash_wait_states
_exit.flash_wait_states := $ + $D1A881 + 5 + ___libs_length - ___data
	db 0
end if

	section	.init_array
init_array::
	section	.ctors
ctors::
	section	.dtors
dtors::
	section	.fini_array
fini_array::

	extern	_main
	extern	___main_argc_argv
	extern	___ctors_count
	extern	___dtors_count
	extern	___fini_array_count
	extern	___init_array_count
	extern	___len_bss
	extern	___libs
	extern	___libs_length
	extern	___data
	extern	___data_length
	extern	___low_bss
	extern	__indcallhl
	extern	_free
	extern	_malloc
	extern	_os_DisableHomeTextBuffer
	extern	_os_EnableHomeTextBuffer
	extern	___prgm_caller
