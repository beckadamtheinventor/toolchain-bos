	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	__u_scan
__u_scan:
	ld	hl, -156
	call	__frameset
	ld	hl, (ix + 9)
	ld	bc, -136
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	xor	a, a
	ld	de, 0
	ld	iy, -1
	ld	l, 1
	ld	(ix + -3), de
	push	ix
	ld	de, -133
	add	ix, de
	lea	bc, ix + 0
	pop	ix
	push	ix
	ld	de, -139
	add	ix, de
	ld	(ix + 0), bc
	pop	ix
	ld	bc, (ix + 12)
	ld	(_argp), bc
	ld	(_fields), a
	ld	de, (ix + -3)
	ld	(_len), de
	ld	(_prev_ch), de
	xor	a, a
	ld	(_isunget), a
	ld	bc, (ix + 6)
	ld	(_bptr), bc
BB0_1:
	ld	a, l
	or	a, a
	jq	z, BB0_10
	push	ix
	ld	bc, -142
	add	ix, bc
	ld	(ix + 0), l
	pop	ix
	push	de
	pop	hl
	ld	bc, -1
	or	a, a
	sbc	hl, bc
	jq	z, BB0_10
	ld	bc, -136
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	a, (hl)
	or	a, a
	jq	z, BB0_10
	ex	de, hl
	ld	hl, _fmt_str
	push	hl
	push	de
	call	__u_sscan
	pop	de
	pop	de
	ld	a, (_fmt_str)
	cp	a, 1
	jq	z, BB0_12
	cp	a, 2
	ld	bc, -136
	lea	iy, ix + 0
	push	af
	add	iy, bc
	pop	af
	ld	(iy + 0), hl
	jq	nz, BB0_14
	ld	a, (_fmt_str+3)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	push	hl
	call	_isspace
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_38
	call	_get
	push	hl
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB0_61
	ld	a, (_fmt_str+3)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, a
	ex	de, hl
	or	a, a
	sbc	hl, bc
	jq	z, BB0_61
	jq	BB0_9
BB0_14:
	ld	a, (_fmt_str+1)
	ld	e, a
	cp	a, 0
	call	__setflag
	ld	d, 0
	jq	m, BB0_40
	ld	a, (_fmt_str+4)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	iy
	ld	iyl, a
	lea	hl, iy + 0
	ld	bc, 65
	or	a, a
	sbc	hl, bc
	jq	z, BB0_17
	lea	hl, iy + 0
	ld	bc, 69
	or	a, a
	sbc	hl, bc
	ld	bc, 3
	or	a, a
	sbc	hl, bc
	jq	nc, BB0_60
BB0_17:
	ld	a, (_fmt_str+5)
	dec	a
	cp	a, 126
	jq	c, BB0_19
	ld	a, 126
	ld	(_fmt_str+5), a
BB0_19:
	call	_get
	ld	de, -142
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	ld	c, 16
	call	__ishl
	push	hl
	pop	iy
	ld	de, -65536
	or	a, a
	sbc	hl, de
	jq	z, BB0_123
	lea	hl, iy + 0
	call	__ishrs
	push	hl
	call	_isspace
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_19
	ld	iyl, 0
	ld	c, iyl
	or	a, a
	sbc	hl, hl
	push	ix
	ld	de, -145
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	ld	a, 1
	ld	e, a
	ld	iyh, e
	ld	(ix + -3), bc
	push	ix
	ld	bc, -148
	add	ix, bc
	ld	(ix + 0), e
	pop	ix
	push	ix
	ld	bc, -151
	add	ix, bc
	ld	(ix + 0), e
	pop	ix
	ld	bc, (ix + -3)
BB0_22:
	ex	de, hl
	ld	(ix + -3), de
	ld	de, -155
	lea	hl, ix + 0
	add	hl, de
	ld	(hl), c
	ld	de, (ix + -3)
	ld	e, c
	ld	a, (_fmt_str+5)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, a
	ld	(ix + -3), bc
	push	ix
	ld	bc, -154
	add	ix, bc
	ld	(ix + 0), de
	pop	ix
	ex	de, hl
	ld	bc, (ix + -3)
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	p, BB0_31
	ld	bc, -142
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	a, l
	ld	bc, -156
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), a
	ld	a, iyh
	or	a, a
	jq	nz, BB0_27
BB0_24:
	ld	de, -142
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	bc, 255
	call	__iand
	ld	a, l
	cp	a, 46
	jq	nz, BB0_29
	push	ix
	ld	bc, -148
	add	ix, bc
	ld	a, (ix + 0)
	pop	ix
	or	a, a
	jq	z, BB0_29
	ex	de, hl
	ld	e, iyh
	ex	de, hl
	ld	c, iyl
	ld	de, -151
	lea	iy, ix + 0
	add	iy, de
	ld	a, (iy + 0)
	jq	BB0_36
BB0_27:
	ld	de, -142
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	c, 16
	call	__ishl
	push	hl
	pop	de
	ld	bc, 4521984
	or	a, a
	sbc	hl, bc
	ex	de, hl
	ld	e, iyl
	ex	de, hl
	ld	c, iyl
	ld	a, 1
	jq	z, BB0_36
	ex	de, hl
	ld	bc, 6619136
	or	a, a
	sbc	hl, bc
	ex	de, hl
	ld	e, iyl
	ex	de, hl
	ld	c, iyl
	ld	a, 1
	jq	nz, BB0_24
	jq	BB0_36
BB0_29:
	push	ix
	ld	de, -151
	add	ix, de
	ld	a, (ix + 0)
	pop	ix
	or	a, a
	ld	c, 16
	jq	nz, BB0_33
BB0_30:
	ld	de, -142
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	call	__ishl
	call	__ishrs
	push	hl
	lea	hl, ix + 0
	add	hl, de
	push	af
	ld	a, iyh
	ld	(hl), a
	pop	af
	call	_isdigit
	xor	a, a
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	de, -142
	lea	iy, ix + 0
	push	af
	add	iy, de
	pop	af
	ld	l, (iy + 0)
	push	ix
	ld	de, -148
	push	af
	add	ix, de
	pop	af
	ld	c, (ix + 0)
	pop	ix
	jq	nz, BB0_36
	jq	BB0_31
BB0_33:
	push	ix
	ld	de, -156
	add	ix, de
	ld	a, (ix + 0)
	pop	ix
	cp	a, 45
	jq	z, BB0_35
	ld	a, l
	cp	a, 43
	jq	nz, BB0_30
BB0_35:
	ex	de, hl
	ld	e, iyh
	ex	de, hl
	push	ix
	ld	de, -148
	add	ix, de
	ld	c, (ix + 0)
	pop	ix
	ld	a, iyl
BB0_36:
	ld	de, -154
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), a
	push	ix
	ld	de, -151
	add	ix, de
	ld	(ix + 0), c
	pop	ix
	push	ix
	ld	bc, -148
	add	ix, bc
	ld	(ix + 0), l
	pop	ix
	ld	bc, -139
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	ix
	ld	bc, -145
	add	ix, bc
	ld	de, (ix + 0)
	pop	ix
	add	hl, de
	push	ix
	ld	bc, -156
	add	ix, bc
	ld	a, (ix + 0)
	pop	ix
	ld	(hl), a
	call	_get
	push	ix
	ld	bc, -142
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	ld	a, l
	cp	a, -1
	jq	z, BB0_123
	ld	de, -145
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	inc	hl
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	ld	de, -155
	lea	hl, ix + 0
	add	hl, de
	ld	c, (hl)
	inc	c
	push	ix
	ld	de, -148
	add	ix, de
	push	af
	ld	a, (ix + 0)
	ld	iyh, a
	pop	af
	pop	ix
	push	ix
	ld	de, -151
	add	ix, de
	ld	a, (ix + 0)
	pop	ix
	push	ix
	ld	de, -148
	add	ix, de
	ld	(ix + 0), a
	pop	ix
	push	ix
	ld	de, -154
	add	ix, de
	ld	a, (ix + 0)
	pop	ix
	push	ix
	ld	de, -151
	add	ix, de
	ld	(ix + 0), a
	pop	ix
	ld	iyl, 0
	or	a, a
	sbc	hl, hl
	jq	BB0_22
BB0_38:
	call	_get
	push	hl
	call	_isspace
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_38
	call	_unget
	jq	BB0_61
BB0_40:
	bit	4, e
	ld	bc, 0
	jq	nz, BB0_42
	ld	iy, (_argp)
	lea	hl, iy + 3
	ld	(_argp), hl
	ld	bc, (iy)
BB0_42:
	ld	iy, (_fmt_str+7)
	ld	d, (iy)
	ld	a, d
	cp	a, 94
	jq	nz, BB0_44
	inc	iy
	ld	(_fmt_str+7), iy
BB0_44:
	ld	a, (_fmt_str+5)
	ld	e, a
	or	a, a
	ld	a, 127
	jq	z, BB0_46
	ld	a, e
BB0_46:
	push	bc
	pop	iy
	ld	e, a
	dec	e
	or	a, a
	jq	z, BB0_53
	ld	bc, -145
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), e
	push	ix
	ld	bc, -148
	add	ix, bc
	ld	(ix + 0), iy
	pop	ix
	ld	bc, -142
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), d
	call	_get
	push	hl
	pop	de
	ld	c, 16
	call	__ishl
	push	hl
	pop	iy
	call	__ishrs
	ld	(ix + -3), de
	push	ix
	ld	de, -151
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	lea	hl, iy + 0
	ld	bc, -65536
	or	a, a
	sbc	hl, bc
	ld	de, (ix + -3)
	jq	z, BB0_123
	ld	c, e
	ld	iy, (_fmt_str+7)
	ld	de, (_fmt_str+10)
	ld	(ix + -3), de
	ld	de, -154
	lea	hl, ix + 0
	add	hl, de
	ld	(hl), c
	ld	de, (ix + -3)
BB0_49:
	lea	hl, iy + 0
	or	a, a
	sbc	hl, de
	jq	nc, BB0_57
	ld	a, (iy)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	de
	pop	bc
	push	hl
	pop	de
	ld	e, a
	inc	iy
	ld	(ix + -3), bc
	push	ix
	ld	bc, -151
	add	ix, bc
	ld	hl, (ix + 0)
	pop	ix
	or	a, a
	sbc	hl, de
	ld	bc, (ix + -3)
	push	bc
	pop	de
	ld	(ix + -3), de
	ld	de, -154
	lea	hl, ix + 0
	push	af
	add	hl, de
	pop	af
	ld	c, (hl)
	ld	de, (ix + -3)
	jq	nz, BB0_49
	ld	bc, -142
	lea	hl, ix + 0
	add	hl, bc
	ld	d, (hl)
	ld	a, d
	cp	a, 94
	ld	bc, -145
	lea	iy, ix + 0
	push	af
	add	iy, bc
	pop	af
	ld	e, (iy + 0)
	jq	nz, BB0_58
	jq	BB0_52
BB0_57:
	ld	bc, -142
	lea	hl, ix + 0
	add	hl, bc
	ld	d, (hl)
	ld	a, d
	cp	a, 94
	ld	bc, -145
	lea	iy, ix + 0
	push	af
	add	iy, bc
	pop	af
	ld	e, (iy + 0)
	jq	nz, BB0_52
BB0_58:
	ld	bc, -148
	lea	hl, ix + 0
	add	hl, bc
	ld	iy, (hl)
	lea	hl, iy + 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	bc, 0
	ld	a, e
	ld	(ix + -3), bc
	push	ix
	ld	bc, -136
	push	af
	add	ix, bc
	pop	af
	ld	hl, (ix + 0)
	pop	ix
	ld	bc, (ix + -3)
	jq	z, BB0_46
	ld	bc, -154
	lea	hl, ix + 0
	add	hl, bc
	ld	a, (hl)
	ld	(iy), a
	inc	iy
	lea	bc, iy + 0
	ld	a, e
	jq	BB0_46
BB0_60:
	lea	hl, iy + 0
	ld	bc, 88
	or	a, a
	sbc	hl, bc
	push	hl
	pop	iy
	ld	bc, 33
	or	a, a
	sbc	hl, bc
	jq	nc, BB0_61
	ld	hl, LJTI0_0
	lea	bc, iy + 0
	add	hl, bc
	add	hl, bc
	add	hl, bc
	ld	hl, (hl)
	ld	bc, 10
	jp	(hl)
BB0_63:
	ld	hl, 16
	jq	BB0_79
BB0_31:
	ld	bc, -145
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_64
	ld	a, (_fields)
	jq	BB0_56
BB0_52:
	ld	a, e
	cp	a, 1
	call	__setflag
	call	p, _unget
	ld	bc, -136
	lea	hl, ix + 0
	push	af
	add	hl, bc
	pop	af
	ld	hl, (hl)
	ld	bc, -148
	lea	hl, ix + 0
	push	af
	add	hl, bc
	pop	af
	ld	iy, (hl)
BB0_53:
	lea	hl, iy + 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	a, 1
	push	ix
	ld	bc, -142
	push	af
	add	ix, bc
	pop	af
	ld	(ix + 0), a
	pop	ix
	jq	z, BB0_61
	ld	(iy), 0
BB0_55:
	ld	a, 1
	jq	BB0_56
BB0_64:
	ld	a, (_fmt_str+5)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, a
	ld	bc, -154
	lea	iy, ix + 0
	add	iy, bc
	ld	hl, (iy + 0)
	or	a, a
	sbc	hl, de
	call	__setflag
	call	m, _unget
	ld	bc, -139
	lea	hl, ix + 0
	add	hl, bc
	ld	de, (hl)
	push	de
	pop	hl
	ld	(ix + -3), de
	ld	de, -145
	lea	iy, ix + 0
	add	iy, de
	ld	bc, (iy + 0)
	add	hl, bc
	ld	(hl), 0
	ld	hl, 0
	push	hl
	ld	de, (ix + -3)
	push	de
	call	_strtod
	pop	bc
	pop	bc
	ld	a, (_fmt_str+1)
	bit	4, a
	ld	a, 1
	jq	nz, BB0_56
	ld	iy, (_argp)
	lea	bc, iy + 3
	ld	(_argp), bc
	ld	iy, (iy)
	ld	(iy), hl
	ld	(iy + 3), e
BB0_135:
	ld	hl, _fields
	inc	(hl)
	jq	BB0_55
BB0_66:
	bit	4, e
	ld	hl, 0
	jq	nz, BB0_68
	ld	iy, (_argp)
	lea	hl, iy + 3
	ld	(_argp), hl
	ld	hl, (iy)
	ld	d, 0
BB0_68:
	ld	a, (_fmt_str+5)
	ld	iyl, a
	or	a, a
	jq	nz, BB0_70
	ld	a, 1
	ld	(_fmt_str+5), a
	ld	iyl, a
BB0_70:
	push	ix
	ld	bc, -142
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	ld	iyh, d
BB0_71:
	ld	bc, 0
	ld	c, iyh
	ld	a, iyl
	rlc	a
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, iyl
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	p, BB0_55
	ld	bc, -145
	lea	hl, ix + 0
	add	hl, bc
	push	af
	ld	a, iyh
	ld	(hl), a
	pop	af
	call	_get
	push	hl
	pop	de
	ld	a, e
	cp	a, -1
	jq	z, BB0_123
	ld	bc, -142
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	bc, 0
	jq	z, BB0_75
	ld	a, e
	ld	de, -142
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(hl), a
	inc	hl
	push	hl
	pop	bc
BB0_75:
	ld	hl, _fields
	inc	(hl)
	ld	de, -145
	lea	hl, ix + 0
	add	hl, de
	push	af
	ld	a, (hl)
	ld	iyh, a
	pop	af
	inc	iyh
	ld	a, (_fmt_str+5)
	ld	iyl, a
	push	ix
	ld	de, -142
	add	ix, de
	ld	(ix + 0), bc
	pop	ix
	jq	BB0_71
BB0_76:
	bit	4, e
	jq	nz, BB0_61
	ld	bc, (_len)
	ld	iy, (_argp)
	lea	de, iy + 3
	ld	(_argp), de
	ld	hl, (iy)
	ld	(hl), bc
	ld	hl, _fields
	inc	(hl)
	jq	BB0_61
BB0_78:
	ld	hl, 8
BB0_79:
	push	hl
	pop	bc
BB0_80:
	ld	de, -145
	lea	hl, ix + 0
	add	hl, de
	ld	(hl), bc
	ld	a, (_fmt_str+5)
	dec	a
	cp	a, 126
	jq	c, BB0_82
	ld	a, 126
	ld	(_fmt_str+5), a
BB0_82:
	call	_get
	ld	c, 16
	call	__ishl
	push	hl
	pop	iy
	ld	de, -65536
	or	a, a
	sbc	hl, de
	jq	z, BB0_99
	lea	hl, iy + 0
	call	__ishrs
	push	hl
	call	_isspace
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_82
	call	_unget
	call	_get
	ld	a, l
	cp	a, -1
	ld	a, 0
	ld	de, -142
	lea	iy, ix + 0
	push	af
	add	iy, de
	pop	af
	ld	(iy + 0), a
	push	ix
	ld	de, -136
	push	af
	add	ix, de
	pop	af
	ld	bc, (ix + 0)
	pop	ix
	jq	z, BB0_61
	ld	bc, -148
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), a
	ld	de, 0
	push	ix
	ld	bc, -142
	add	ix, bc
	ld	(ix + 0), de
	pop	ix
BB0_86:
	ld	c, l
	ld	(ix + -3), bc
	ld	bc, -145
	lea	iy, ix + 0
	add	iy, bc
	ld	de, (iy + 0)
	ld	a, e
	cp	a, 8
	ld	bc, (ix + -3)
	jq	nz, BB0_91
	ld	a, c
	cp	a, 48
	call	__setflag
	jq	m, BB0_95
	ld	a, c
	cp	a, 56
	call	__setflag
	jq	m, BB0_97
	jq	BB0_89
BB0_91:
	ld	(ix + -3), de
	ld	de, -151
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), c
	ld	de, (ix + -3)
	ld	a, e
	cp	a, 10
	jq	nz, BB0_93
	ld	c, 16
	call	__ishl
	call	__ishrs
	push	hl
	call	_isdigit
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	de, -151
	lea	iy, ix + 0
	push	af
	add	iy, de
	pop	af
	ld	c, (iy + 0)
	jq	z, BB0_95
	jq	BB0_97
BB0_93:
	ld	bc, -145
	lea	iy, ix + 0
	add	iy, bc
	ld	de, (iy + 0)
	ld	a, e
	cp	a, 16
	push	ix
	ld	de, -151
	push	af
	add	ix, de
	pop	af
	ld	c, (ix + 0)
	pop	ix
	jq	nz, BB0_95
	ld	c, 16
	call	__ishl
	call	__ishrs
	push	hl
	call	_isxdigit
	ld	de, -151
	lea	iy, ix + 0
	add	iy, de
	ld	c, (iy + 0)
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_97
BB0_95:
	ld	a, c
	cp	a, 43
	jq	z, BB0_97
	ld	a, c
	cp	a, 45
	jq	nz, BB0_89
BB0_97:
	ld	de, -139
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	ld	(ix + -3), bc
	ld	bc, -142
	lea	iy, ix + 0
	add	iy, bc
	ld	de, (iy + 0)
	push	de
	pop	iy
	add	hl, de
	ld	bc, (ix + -3)
	ld	(hl), c
	ld	de, -148
	lea	hl, ix + 0
	add	hl, de
	ld	a, (hl)
	inc	a
	ld	de, 0
	ld	(ix + -3), bc
	push	ix
	ld	bc, -148
	add	ix, bc
	ld	(ix + 0), a
	pop	ix
	ld	e, a
	ld	a, (_fmt_str+5)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	bc, (ix + -3)
	push	hl
	pop	bc
	ld	c, a
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	p, BB0_126
	inc	iy
	ld	bc, -142
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), iy
	call	_get
	ld	a, l
	cp	a, -1
	ld	a, 0
	ld	de, -136
	lea	iy, ix + 0
	push	af
	add	iy, de
	pop	af
	ld	bc, (iy + 0)
	jq	nz, BB0_86
	jq	BB0_56
BB0_99:
	xor	a, a
BB0_100:
	ld	de, -142
	lea	hl, ix + 0
	add	hl, de
	ld	(hl), a
	ld	de, -136
	lea	iy, ix + 0
	add	iy, de
	ld	bc, (iy + 0)
	jq	BB0_61
BB0_101:
	ld	a, (_fmt_str+5)
	dec	a
	cp	a, 126
	jq	c, BB0_103
	ld	a, 126
	ld	(_fmt_str+5), a
BB0_103:
	call	_get
	push	hl
	pop	bc
	ld	a, c
	cp	a, -1
	ld	a, 0
	ld	e, a
	jq	z, BB0_131
	ld	de, -145
	lea	hl, ix + 0
	add	hl, de
	ld	(hl), a
	or	a, a
	sbc	hl, hl
	ld	de, -142
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
BB0_105:
	ld	de, -148
	lea	hl, ix + 0
	add	hl, de
	ld	(hl), bc
	push	bc
	pop	hl
	ld	c, 16
	call	__ishl
	call	__ishrs
	push	hl
	call	_isxdigit
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB0_124
	ld	bc, -148
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	a, l
	ld	bc, -139
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	bc, -142
	lea	iy, ix + 0
	add	iy, bc
	ld	de, (iy + 0)
	push	de
	pop	iy
	add	hl, de
	ld	(hl), a
	ld	bc, -145
	lea	hl, ix + 0
	add	hl, bc
	ld	a, (hl)
	inc	a
	ld	de, 0
	push	ix
	add	ix, bc
	ld	(ix + 0), a
	pop	ix
	ld	e, a
	ld	a, (_fmt_str+5)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, a
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	p, BB0_127
	inc	iy
	ld	bc, -142
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), iy
	call	_get
	push	hl
	pop	bc
	ld	a, c
	cp	a, -1
	jq	nz, BB0_105
	xor	a, a
	jq	BB0_130
BB0_109:
	bit	4, e
	ld	hl, 0
	jq	nz, BB0_111
	ld	iy, (_argp)
	lea	hl, iy + 3
	ld	(_argp), hl
	ld	hl, (iy)
BB0_111:
	ld	bc, -145
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	ld	a, (_fmt_str+5)
	or	a, a
	jq	nz, BB0_113
	ld	a, 127
	ld	(_fmt_str+5), a
BB0_113:
	call	_get
	ld	c, 16
	call	__ishl
	push	hl
	pop	iy
	ld	de, -65536
	or	a, a
	sbc	hl, de
	jq	z, BB0_123
	lea	hl, iy + 0
	call	__ishrs
	push	hl
	call	_isspace
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_113
	call	_unget
	call	_get
	ld	a, l
	cp	a, -1
	ld	a, 0
	ld	bc, -142
	lea	iy, ix + 0
	push	af
	add	iy, bc
	pop	af
	ld	(iy + 0), a
	jq	z, BB0_61
	ld	bc, -142
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), a
BB0_117:
	ld	a, l
	ld	de, -148
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), a
	ld	c, 16
	call	__ishl
	call	__ishrs
	push	hl
	call	_isspace
	pop	de
	push	ix
	ld	de, -148
	add	ix, de
	ld	a, (ix + 0)
	pop	ix
	ld	e, a
	or	a, a
	jq	z, BB0_132
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_132
	ld	bc, -145
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	hl, 0
	ld	bc, -151
	lea	iy, ix + 0
	push	af
	add	iy, bc
	pop	af
	ld	(iy + 0), hl
	jq	z, BB0_121
	ld	bc, -145
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	(hl), e
	inc	hl
	ld	bc, -151
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
BB0_121:
	ld	bc, -142
	lea	hl, ix + 0
	add	hl, bc
	ld	a, (hl)
	inc	a
	ld	de, 0
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), a
	ld	e, a
	ld	a, (_fmt_str+5)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, a
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	p, BB0_150
	call	_get
	ld	a, l
	cp	a, -1
	ld	bc, -151
	lea	iy, ix + 0
	push	af
	add	iy, bc
	pop	af
	ld	de, (iy + 0)
	push	ix
	ld	bc, -145
	push	af
	add	ix, bc
	pop	af
	ld	(ix + 0), de
	pop	ix
	jq	nz, BB0_117
BB0_123:
	xor	a, a
BB0_56:
	ld	bc, -142
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), a
BB0_61:
	ld	de, (_prev_ch)
	ld	iy, -1
	ld	bc, -142
	lea	hl, ix + 0
	add	hl, bc
	ld	l, (hl)
	jq	BB0_1
BB0_124:
	ld	bc, -142
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	a, 0
	ld	e, a
	jq	z, BB0_131
	ld	a, (_fmt_str+5)
	ld	de, 0
	ld	bc, -145
	lea	hl, ix + 0
	add	hl, bc
	ld	l, (hl)
	ld	e, l
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, a
	jq	BB0_128
BB0_126:
	inc	iy
	ld	(ix + -3), bc
	ld	bc, -142
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), iy
	ld	bc, (ix + -3)
	jq	BB0_137
BB0_89:
	ld	bc, -142
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_136
	ld	a, (_fields)
	jq	BB0_100
BB0_127:
	inc	iy
	ld	(ix + -3), bc
	ld	bc, -142
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), iy
	ld	bc, (ix + -3)
BB0_128:
	ex	de, hl
	or	a, a
	sbc	hl, bc
	call	__setflag
	call	m, _unget
	ld	bc, -139
	lea	hl, ix + 0
	add	hl, bc
	ld	de, (hl)
	push	de
	pop	hl
	ld	(ix + -3), de
	ld	de, -142
	lea	iy, ix + 0
	add	iy, de
	ld	bc, (iy + 0)
	add	hl, bc
	ld	(hl), 0
	ld	hl, 16
	push	hl
	ld	hl, 0
	push	hl
	ld	de, (ix + -3)
	push	de
	call	_strtoul
	pop	de
	pop	de
	pop	de
	ld	a, (_fmt_str+1)
	bit	4, a
	ld	a, 1
	ld	e, a
	jq	nz, BB0_131
	ld	iy, (_argp)
	lea	de, iy + 3
	ld	(_argp), de
	ld	iy, (iy)
	ld	(iy), hl
	ld	hl, _fields
	inc	(hl)
	ld	a, 1
BB0_130:
	ld	e, a
BB0_131:
	ld	bc, -142
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), e
	jq	BB0_61
BB0_132:
	ld	a, (_fmt_str+5)
	ld	de, 0
	ld	bc, -142
	lea	hl, ix + 0
	add	hl, bc
	ld	l, (hl)
	ld	e, l
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, a
BB0_133:
	ex	de, hl
	or	a, a
	sbc	hl, bc
	call	__setflag
	call	m, _unget
	ld	bc, -145
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	a, 1
	ld	bc, -142
	lea	iy, ix + 0
	push	af
	add	iy, bc
	pop	af
	ld	(iy + 0), a
	jq	z, BB0_61
	ld	bc, -145
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	(hl), 0
	jq	BB0_135
BB0_136:
	ld	a, (_fmt_str+5)
	ld	de, 0
	ld	bc, -148
	lea	hl, ix + 0
	add	hl, bc
	ld	l, (hl)
	ld	e, l
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, a
BB0_137:
	ex	de, hl
	or	a, a
	sbc	hl, bc
	call	__setflag
	call	m, _unget
	ld	bc, -139
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	bc, -142
	lea	iy, ix + 0
	add	iy, bc
	ld	de, (iy + 0)
	add	hl, de
	ld	(hl), 0
	ld	a, (_fmt_str+4)
	cp	a, 117
	ld	bc, -145
	lea	hl, ix + 0
	push	af
	add	hl, bc
	pop	af
	ld	hl, (hl)
	jq	z, BB0_140
	ld	a, l
	cp	a, 8
	jq	z, BB0_140
	ld	a, l
	cp	a, 16
	jq	nz, BB0_146
BB0_140:
	push	hl
	ld	hl, 0
	push	hl
	ld	bc, -139
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_strtoul
BB0_141:
	pop	bc
	pop	bc
	pop	bc
	ld	a, (_fmt_str+1)
	bit	4, a
	ld	a, 1
	ld	bc, -142
	lea	iy, ix + 0
	push	af
	add	iy, bc
	pop	af
	ld	(iy + 0), a
	ld	(ix + -3), de
	push	ix
	ld	de, -136
	push	af
	add	ix, de
	pop	af
	ld	bc, (ix + 0)
	pop	ix
	ld	de, (ix + -3)
	jq	nz, BB0_61
	ld	a, (_fmt_str+2)
	cp	a, 76
	jq	nz, BB0_144
BB0_143:
	ld	iy, (_argp)
	lea	bc, iy + 3
	ld	(_argp), bc
	ld	iy, (iy)
	ld	(iy), hl
	ld	(iy + 3), e
	jq	BB0_149
BB0_144:
	cp	a, 104
	jq	nz, BB0_147
	ld	iy, (_argp)
	lea	de, iy + 3
	ld	(_argp), de
	ld	iy, (iy)
	ld	(iy), l
	ld	(iy + 1), h
	jq	BB0_149
BB0_146:
	push	hl
	ld	hl, 0
	push	hl
	ld	bc, -139
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_strtol
	jq	BB0_141
BB0_147:
	cp	a, 108
	jq	z, BB0_143
	ld	iy, (_argp)
	lea	de, iy + 3
	ld	(_argp), de
	ld	iy, (iy)
	ld	(iy), hl
BB0_149:
	ld	hl, _fields
	inc	(hl)
	ld	a, 1
	jq	BB0_100
BB0_150:
	ld	(ix + -3), bc
	ld	bc, -151
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	bc, -145
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	ld	bc, (ix + -3)
	jq	BB0_133
BB0_9:
	ld	de, (_prev_ch)
	ld	iy, -1
BB0_10:
	ex	de, hl
	ld	de, -1
	or	a, a
	sbc	hl, de
	jq	nz, BB0_12
	ld	hl, (_len)
	ld	de, 2
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	m, BB0_13
BB0_12:
	ld	a, (_fields)
	ld	iy, 0
	ld	iyl, a
BB0_13:
	lea	hl, iy + 0
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits
	section	.rodata,"a",@progbits
lJTI0_0:
	private	LJTI0_0
LJTI0_0:
	dl	BB0_63
	dl	BB0_61
	dl	BB0_61
	dl	BB0_61
	dl	BB0_61
	dl	BB0_61
	dl	BB0_61
	dl	BB0_61
	dl	BB0_61
	dl	BB0_17
	dl	BB0_61
	dl	BB0_66
	dl	BB0_80
	dl	BB0_17
	dl	BB0_17
	dl	BB0_17
	dl	BB0_61
	dl	BB0_80
	dl	BB0_61
	dl	BB0_61
	dl	BB0_61
	dl	BB0_61
	dl	BB0_76
	dl	BB0_78
	dl	BB0_101
	dl	BB0_61
	dl	BB0_61
	dl	BB0_109
	dl	BB0_61
	dl	BB0_80
	dl	BB0_61
	dl	BB0_61
	dl	BB0_63

	section	.text,"ax",@progbits
	private	_get
_get:
	ld	hl, (_len)
	inc	hl
	ld	(_len), hl
	ld	hl, (_bptr)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB1_1
	ld	a, (_isunget)
	ld	l, 1
	xor	a, l
	bit	0, a
	jq	nz, BB1_4
	xor	a, a
	ld	(_isunget), a
	ld	hl, (_prev_ch)
	ret
BB1_1:
	push	hl
	pop	iy
	inc	iy
	ld	(_bptr), iy
	ld	a, (hl)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	ret
BB1_4:
	call	_getchar
	ld	(_prev_ch), hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	private	_unget
_unget:
	ld	hl, (_len)
	dec	hl
	ld	(_len), hl
	ld	a, 1
	ld	(_isunget), a
	ld	hl, (_bptr)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB2_2
	dec	hl
	ld	(_bptr), hl
BB2_2:
	ret
	section	.text,"ax",@progbits

	section	.bss,"aw",@nobits
	private	_argp
_argp:
	rb	3

	section	.bss,"aw",@nobits
	private	_fields
_fields:
	rb	1

	section	.bss,"aw",@nobits
	private	_len
_len:
	rb	3

	section	.bss,"aw",@nobits
	private	_prev_ch
_prev_ch:
	rb	3

	section	.bss,"aw",@nobits
	private	_isunget
_isunget:
	rb	1

	section	.bss,"aw",@nobits
	private	_bptr
_bptr:
	rb	3

	section	.bss,"aw",@nobits
	private	_fmt_str
_fmt_str:
	rb	19

	ident	"clang version 12.0.0 (https://github.com/jacobly0/llvm-project f1906007dd73cb37b01d5860b542715ee76f2492)"
	extern	_getchar
	extern	__Unwind_SjLj_Register
	extern	__frameset
	extern	_isxdigit
	extern	_isspace
	extern	_strtoul
	extern	_isdigit
	extern	__ishrs
	extern	__u_sscan
	extern	__ishl
	extern	__setflag
	extern	__iand
	extern	__Unwind_SjLj_Unregister
	extern	_strtod
	extern	_strtol
