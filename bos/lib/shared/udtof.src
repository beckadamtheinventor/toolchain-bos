	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	__u_dtof
__u_dtof:
	ld	hl, -15
	call	__frameset
	xor	a, a
	ld	(ix + -6), a
	ld	a, (___print_fmt+6)
	ld	d, a
	cp	a, 0
	call	__setflag
	jq	p, BB0_2
	ld	d, 6
	ld	a, d
	ld	(___print_fmt+6), a
BB0_2:
	ld	iy, (ix + 6)
	ld	e, (ix + 9)
	ld	bc, __info
	ld	a, (___print_fmt+5)
	cp	a, 0
	call	__setflag
	jq	p, BB0_4
	ld	hl, ___print_fmt+1
	set	0, (hl)
	neg
	ld	(___print_fmt+5), a
BB0_4:
	or	a, a
	sbc	hl, hl
	ld	(ix + -12), d
	ld	l, d
	inc	hl
	ld	(ix + -3), hl
	push	bc
	ld	l, e
	push	hl
	push	iy
	call	__u_flt_info
	pop	hl
	pop	hl
	pop	hl
	ld	a, (___print_fmt+4)
	cp	a, 102
	jq	nz, BB0_7
	ld	a, (__info+1)
	cp	a, 1
	call	__setflag
	ld	iy, (ix + -3)
	lea	bc, iy + 0
	ld	d, 0
	jq	m, BB0_8
	ld	e, 0
	or	a, a
	sbc	hl, hl
	ld	l, a
	lea	bc, iy + 0
	ld	a, e
	call	__ladd
	push	hl
	pop	bc
	ld	d, e
	jq	BB0_8
BB0_7:
	ld	iy, (ix + -3)
	lea	bc, iy + 0
	ld	d, 0
BB0_8:
	ld	hl, 6
	ld	e, 0
	ld	a, d
	call	__lcmpu
	call	__setflag
	jq	m, BB0_10
	ld	a, 0
	jq	BB0_11
BB0_10:
	ld	a, 1
BB0_11:
	bit	0, a
	jq	z, BB0_14
	ld	c, 7
BB0_14:
	ld	hl, __info
	push	bc
	push	hl
	call	__u_flt_rnd
	pop	hl
	pop	hl
	ld	a, (___print_fmt+4)
	ld	(ix + -9), a
	cp	a, 102
	ld	e, 1
	ld	h, 0
	ld	l, e
	jq	z, BB0_17
	ld	l, h
BB0_17:
	ld	a, (__info+1)
	ld	d, a
	cp	a, 1
	call	__setflag
	ld	bc, (ix + -3)
	jq	p, BB0_19
	ld	e, h
BB0_19:
	ld	a, l
	and	a, e
	bit	0, a
	ld	l, d
	jq	nz, BB0_21
	ld	l, 0
BB0_21:
	ld	a, l
	add	a, c
	ld	iyh, a
	ld	a, (__info)
	ld	e, a
	and	a, 1
	ld	iyl, 1
	xor	a, iyl
	ld	h, a
	ld	a, (___print_fmt+1)
	ld	c, a
	ld	a, h
	xor	a, iyl
	bit	0, a
	ld	(ix + -15), l
	jq	nz, BB0_25
	bit	1, c
	jq	nz, BB0_26
	ld	b, 3
	ld	a, c
	and	a, 4
	ld	h, a
	or	a, a
	jq	z, BB0_27
	ld	a, 0
	jq	BB0_28
BB0_25:
	ld	a, 45
	jq	BB0_30
BB0_26:
	ld	a, 43
	jq	BB0_30
BB0_27:
	ld	a, 1
BB0_28:
	ld	(ix + -6), a
	ld	a, h
	call	__bshl
BB0_30:
	ld	(ix + -3), a
	ld	hl, ___print_buff
	ld	a, c
	and	a, 64
	ld	b, a
	or	a, a
	ld	(ix + -10), d
	push	af
	ld	a, iyh
	ld	(ix + -11), a
	pop	af
	jq	nz, BB0_33
	ld	a, (ix + -6)
	xor	a, iyl
	xor	a, iyl
	bit	0, a
	jq	nz, BB0_43
BB0_33:
	ld	a, b
	or	a, a
	jq	nz, BB0_35
	ld	a, 0
	jq	BB0_36
BB0_35:
	ld	a, 1
BB0_36:
	bit	0, a
	push	hl
	pop	iy
	jq	nz, BB0_38
	ld	iy, ___print_buff+1
BB0_38:
	bit	0, a
	jq	z, BB0_41
	ld	hl, ___print_leading_char
BB0_41:
	ld	a, (ix + -3)
	ld	(hl), a
	jq	BB0_44
BB0_43:
	push	hl
	pop	iy
BB0_44:
	bit	1, e
	jq	nz, BB0_51
	bit	2, e
	jq	nz, BB0_53
	ld	bc, 1
	ld	a, (ix + -9)
	cp	a, 101
	jq	nz, BB0_57
	ld	a, (__info+2)
	add	a, 48
	ld	(iy), a
	lea	hl, iy + 2
	ld	(iy + 1), 46
	ld	a, (ix + -15)
	add	a, (ix + -12)
	ld	d, a
	ld	(ix + -3), bc
	ld	e, 0
BB0_48:
	ld	a, d
	cp	a, 1
	call	__setflag
	jq	m, BB0_59
	ld	(ix + -6), hl
	ld	hl, (ix + -3)
	push	hl
	pop	iy
	ld	bc, 10
	xor	a, a
	call	__lcmpu
	jq	nc, BB0_60
	ld	(ix + -3), iy
	lea	hl, iy + 0
	ld	bc, 1
	call	__ladd
	ld	iy, __info+2
	ld	bc, (ix + -3)
	add	iy, bc
	ld	a, (iy)
	add	a, 48
	ld	iy, (ix + -6)
	ld	(iy), a
	inc	iy
	dec	d
	ld	(ix + -3), hl
	lea	hl, iy + 0
	jq	BB0_48
BB0_51:
	bit	5, c
	jq	nz, BB0_55
	ld	hl, L_.str.1
	jq	BB0_56
BB0_53:
	bit	5, c
	jq	nz, BB0_58
	ld	hl, L_.str.3
	jq	BB0_56
BB0_55:
	ld	hl, L_.str
	jq	BB0_56
BB0_58:
	ld	hl, L_.str.2
BB0_56:
	push	hl
	push	iy
	call	_strcpy
	pop	hl
	pop	hl
	jq	BB0_106
BB0_59:
	push	hl
	pop	iy
BB0_57:
	ld	e, 0
BB0_61:
	ld	a, (ix + -9)
	cp	a, 102
	jq	nz, BB0_84
	ld	b, -1
	ld	a, (ix + -10)
	cp	a, 0
	call	__setflag
	jq	p, BB0_65
	ld	(iy), 48
	inc	iy
	ld	l, (ix + -11)
	dec	l
	jq	BB0_66
BB0_65:
	ld	l, (ix + -11)
BB0_66:
	ld	a, b
	ld	(ix + -11), l
	sub	a, l
	ld	(ix + -9), a
	ld	c, e
	or	a, a
	sbc	hl, hl
	ld	(ix + -3), hl
	ld	(ix + -6), e
BB0_67:
	ld	a, (ix + -10)
	add	a, c
	ld	h, c
	ld	d, a
	call	__setflag
	jq	m, BB0_70
	ld	(ix + -12), h
	ld	hl, (ix + -3)
	ld	e, (ix + -6)
	ld	bc, 10
	xor	a, a
	call	__lcmpu
	ld	h, (ix + -12)
	ld	b, -1
	jq	nc, BB0_70
	ld	d, h
	ld	hl, (ix + -3)
	ld	e, (ix + -6)
	ld	bc, 1
	xor	a, a
	call	__ladd
	ld	(ix + -15), hl
	ld	(ix + -6), e
	lea	hl, iy + 0
	ld	iy, __info+2
	ld	bc, (ix + -3)
	add	iy, bc
	ld	a, (iy)
	push	hl
	pop	iy
	ld	b, -1
	add	a, 48
	ld	(iy), a
	inc	iy
	dec	d
	ld	a, (ix + -9)
	add	a, 2
	ld	(ix + -9), a
	ld	hl, (ix + -15)
	ld	(ix + -3), hl
	ld	c, d
	jq	BB0_67
BB0_70:
	ld	(___print_fmt+16), iy
	ld	a, b
	ld	c, (ix + -10)
	sub	a, c
	ld	l, a
	ld	a, (ix + -11)
	add	a, h
	ld	e, a
	ld	a, d
	cp	a, 0
	call	__setflag
	jq	m, BB0_72
	ld	a, c
	add	a, h
	ld	l, a
	inc	l
	ld	a, l
	ld	(___print_fmt+13), a
	ld	a, e
	sub	a, l
	ld	d, a
	ld	(iy), 46
	jq	BB0_77
BB0_72:
	ld	(iy), 46
	ld	a, l
	cp	a, h
	jq	nz, BB0_74
	ld	d, e
	jq	BB0_77
BB0_60:
	ld	iy, (ix + -6)
	ld	e, a
	jq	BB0_61
BB0_74:
	ld	a, b
	ld	l, c
	sub	a, l
	sub	a, h
	cp	a, e
	call	__setflag
	jq	p, BB0_76
	ld	(___print_fmt+14), a
	ld	a, l
	sub	a, (ix + -9)
	ld	d, a
	jq	BB0_77
BB0_76:
	ld	a, e
	ld	(___print_fmt+14), a
	ld	d, 0
BB0_77:
	inc	iy
BB0_78:
	ld	a, d
	cp	a, 1
	call	__setflag
	jq	m, BB0_81
	ld	hl, (ix + -3)
	ld	e, (ix + -6)
	ld	bc, 10
	xor	a, a
	call	__lcmpu
	jq	nc, BB0_81
	ld	hl, (ix + -3)
	ld	e, (ix + -6)
	ld	bc, 1
	xor	a, a
	call	__ladd
	ld	(ix + -9), hl
	ld	(ix + -6), e
	lea	hl, iy + 0
	ld	iy, __info+2
	ld	bc, (ix + -3)
	add	iy, bc
	ld	a, (iy)
	push	hl
	pop	iy
	add	a, 48
	ld	(iy), a
	dec	d
	inc	iy
	ld	hl, (ix + -9)
	ld	(ix + -3), hl
	jq	BB0_78
BB0_81:
	ld	a, d
	cp	a, 1
	call	__setflag
	jq	m, BB0_83
	ld	a, d
	ld	(___print_fmt+15), a
BB0_83:
	ld	e, 0
BB0_84:
	ld	a, (___print_fmt+1)
	ld	(ix + -3), a
	cp	a, 0
	call	__setflag
	jq	p, BB0_91
	ld	a, e
	ld	(___print_fmt+15), a
	inc	iy
BB0_87:
	ld	a, (iy + -2)
	dec	iy
	cp	a, 46
	jq	z, BB0_90
	cp	a, 48
	jq	z, BB0_87
	jq	BB0_91
BB0_90:
	ld	a, e
	ld	(___print_fmt+14), a
BB0_91:
	ld	a, (iy + -1)
	cp	a, 46
	jq	nz, BB0_99
	ld	a, (___print_fmt+14)
	ld	de, 0
	push	de
	pop	bc
	ld	c, a
	ld	a, (___print_fmt+15)
	ld	e, a
	or	a, a
	sbc	hl, hl
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jq	nz, BB0_99
	bit	3, (ix + -3)
	jq	nz, BB0_99
	dec	iy
BB0_99:
	ld	a, (___print_fmt+4)
	cp	a, 101
	jq	nz, BB0_102
	ld	l, 10
	ld	a, (ix + -3)
	and	a, 32
	xor	a, 101
	ld	e, a
	ld	a, (__info+1)
	ld	b, a
	ld	(iy), e
	cp	a, 0
	call	__setflag
	jq	p, BB0_103
	ld	(iy + 1), 45
	ld	a, b
	neg
	ld	b, a
	jq	BB0_104
BB0_102:
	lea	hl, iy + 0
	jq	BB0_105
BB0_103:
	ld	(iy + 1), 43
BB0_104:
	ld	c, l
	call	__bdivs
	ld	h, a
	add	a, 48
	ld	(iy + 2), a
	mlt	hl
	ld	a, b
	sub	a, l
	add	a, 48
	lea	hl, iy + 4
	ld	(iy + 3), a
BB0_105:
	ld	(hl), 0
BB0_106:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.bss,"aw",@nobits
	public	__info
__info:
	rb	12

	section	.rodata,"a",@progbits
	private	L_.str
L_.str:
	db	"INF",000o

	section	.rodata,"a",@progbits
	private	L_.str.1
L_.str.1:
	db	"inf",000o

	section	.rodata,"a",@progbits
	private	L_.str.2
L_.str.2:
	db	"NAN",000o

	section	.rodata,"a",@progbits
	private	L_.str.3
L_.str.3:
	db	"nan",000o

	ident	"clang version 12.0.0 (https://github.com/jacobly0/llvm-project f1906007dd73cb37b01d5860b542715ee76f2492)"
	extern	__Unwind_SjLj_Register
	extern	__frameset
	extern	___print_leading_char
	extern	__u_flt_rnd
	extern	___print_fmt
	extern	___print_buff
	extern	__ladd
	extern	__setflag
	extern	__Unwind_SjLj_Unregister
	extern	_strcpy
	extern	__u_flt_info
	extern	__bshl
	extern	__lcmpu
	extern	__bdivs
