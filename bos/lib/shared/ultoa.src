	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	__u_ltoa
__u_ltoa:
	ld	hl, -22
	call	__frameset
	ld	bc, (ix + 6)
	ld	d, (ix + 9)
	ld	hl, -1
	ld	e, -1
	xor	a, a
	ld	(ix + -15), a
	xor	a, a
	ld	(ix + -22), a
	ld	(ix + -4), d
	ld	a, d
	call	__lcmpu
	call	__setflag
	jq	m, BB0_2
	ld	d, 0
	jq	BB0_3
BB0_2:
	ld	d, 1
BB0_3:
	or	a, a
	sbc	hl, hl
	ld	e, 0
	ld	a, (ix + -4)
	call	__lsub
	bit	0, d
	ld	(ix + -3), bc
	jq	nz, BB0_5
	ld	(ix + -3), hl
BB0_5:
	bit	0, d
	ld	l, (ix + -4)
	jq	nz, BB0_7
	ld	l, e
BB0_7:
	ld	a, (___print_fmt+6)
	cp	a, 0
	call	__setflag
	jq	p, BB0_9
	ld	a, 1
	ld	(___print_fmt+6), a
BB0_9:
	ld	(ix + -7), l
	ld	(ix + -20), a
	ld	(ix + -19), bc
	ld	a, (___print_fmt+5)
	cp	a, 0
	call	__setflag
	jq	p, BB0_11
	ld	hl, ___print_fmt+1
	set	0, (hl)
	neg
	ld	(___print_fmt+5), a
BB0_11:
	ld	iy, 65
	ld	a, (___print_fmt+4)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, a
	ld	bc, 88
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_13
BB0_21:
	ld	d, (ix + -7)
	ld	a, 16
	ld	(ix + -15), a
	xor	a, a
	ld	(ix + -21), a
	jq	BB0_23
BB0_13:
	ld	a, 1
	ld	bc, 111
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_16
	ld	(ix + -21), a
	jq	BB0_15
BB0_16:
	ld	bc, 112
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jq	z, BB0_18
	ld	bc, 120
	ex	de, hl
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_60
BB0_18:
	ld	a, (___print_fmt+1)
	bit	5, a
	jq	nz, BB0_21
	ld	iy, 97
	jq	BB0_21
BB0_60:
	ld	(ix + -21), a
	ld	a, 10
	ld	(ix + -15), a
BB0_15:
	ld	d, (ix + -7)
BB0_23:
	ld	a, iyl
	add	a, -10
	ld	(ix + -16), a
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	hl, (ix + -3)
BB0_24:
	ld	(ix + -7), bc
	ld	iy, 0
	lea	bc, iy + 0
	ld	a, (ix + -15)
	ld	c, a
	xor	a, a
	push	hl
	pop	iy
	ld	e, d
	call	__ldivu
	ld	(ix + -10), hl
	ld	(ix + -11), e
	ld	(ix + -14), bc
	call	__lmulu
	push	hl
	pop	bc
	ld	a, e
	ld	(ix + -3), iy
	lea	hl, iy + 0
	ld	e, d
	call	__lsub
	ld	a, l
	add	a, 48
	ld	e, a
	ld	a, (ix + -16)
	add	a, l
	ld	bc, 10
	or	a, a
	sbc	hl, bc
	jq	nc, BB0_26
	ld	a, e
BB0_26:
	ld	hl, ___print_buff
	ld	bc, (ix + -7)
	push	bc
	pop	iy
	add	hl, bc
	ld	(hl), a
	ld	hl, (ix + -3)
	ld	e, d
	ld	bc, (ix + -14)
	xor	a, a
	call	__lcmpu
	ld	a, 1
	jq	nc, BB0_28
	ld	a, 0
BB0_28:
	lea	bc, iy + 0
	inc	bc
	bit	0, a
	ld	hl, (ix + -10)
	ld	d, (ix + -11)
	jq	nz, BB0_24
	ld	de, 0
	ld	a, (ix + -20)
	ld	e, a
BB0_30:
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	p, BB0_32
	ld	hl, ___print_buff
	add	hl, bc
	ld	(hl), 48
	inc	bc
	jq	BB0_30
BB0_32:
	ld	a, (___print_fmt+1)
	ld	d, a
	ld	iy, ___print_buff
	add	iy, bc
	bit	0, (ix + -21)
	jq	nz, BB0_38
	ld	hl, (ix + -19)
	ld	e, (ix + -4)
	call	__lcmpzero
	jq	z, BB0_38
	bit	3, d
	jq	z, BB0_38
	ld	hl, ___print_buff
	add	hl, bc
	ld	(hl), 88
	push	hl
	pop	iy
	lea	bc, iy + 2
	ld	(iy + 1), 48
	push	bc
	pop	iy
BB0_38:
	ld	hl, -1
	ld	e, -1
	ld	bc, (ix + -19)
	ld	a, (ix + -4)
	call	__lcmpu
	call	__setflag
	jq	p, BB0_40
	ld	a, 0
	jq	BB0_41
BB0_40:
	ld	a, 1
BB0_41:
	ld	e, 43
	bit	0, a
	jq	nz, BB0_46
	bit	1, d
	jq	nz, BB0_50
	ld	a, d
	and	a, 4
	ld	l, a
	or	a, a
	jq	z, BB0_47
	ld	a, 0
	jq	BB0_48
BB0_46:
	ld	e, 45
	jq	BB0_50
BB0_47:
	ld	a, 1
BB0_48:
	ld	(ix + -22), a
	ld	a, l
	ld	b, 3
	call	__bshl
	ld	e, a
BB0_50:
	ld	a, (___print_fmt+6)
	or	a, a
	jq	z, BB0_53
	ld	a, d
	and	a, -65
	ld	d, a
	ld	(___print_fmt+1), a
BB0_53:
	bit	6, d
	jq	nz, BB0_56
	bit	0, (ix + -22)
	jq	z, BB0_57
	lea	hl, iy + 0
	jq	BB0_59
BB0_56:
	lea	hl, iy + 0
	ld	iy, ___print_leading_char
	jq	BB0_58
BB0_57:
	lea	hl, iy + 0
	inc	hl
BB0_58:
	ld	(iy), e
BB0_59:
	ld	(hl), 0
	ld	hl, ___print_buff
	push	hl
	call	__u_reverse
	pop	hl
	ld	hl, ___print_buff
	ld	(ix + 6), hl
	ld	sp, ix
	pop	ix
	jp	___print_sendstring
	section	.text,"ax",@progbits

	ident	"clang version 12.0.0 (https://github.com/jacobly0/llvm-project f1906007dd73cb37b01d5860b542715ee76f2492)"
	extern	__ldivu
	extern	__Unwind_SjLj_Register
	extern	__frameset
	extern	___print_leading_char
	extern	__lcmpzero
	extern	__lmulu
	extern	___print_fmt
	extern	__lsub
	extern	___print_sendstring
	extern	___print_buff
	extern	__setflag
	extern	__Unwind_SjLj_Unregister
	extern	__u_reverse
	extern	__bshl
	extern	__lcmpu
